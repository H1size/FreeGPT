class CopyButtonPlugin{constructor(options={}){this.hook=options.hook,this.callback=options.callback}"after:highlightElement"({el:el,text:text}){let button=Object.assign(document.createElement("button"),{innerHTML:"<span class='material-icons-round'>content_copy</span>",className:"hljs-copy-button"});button.dataset.copied=!1,el.parentElement.classList.add("hljs-copy-wrapper"),el.parentElement.appendChild(button),button.onclick=()=>{let newText=text;this.hook&&"function"==typeof this.hook&&(newText=this.hook(text,el)||text),this.copyToClipboard(newText).then((()=>{button.innerHTML="<span class='material-icons-round'>file_copy</span>",button.dataset.copied=!0,setTimeout((()=>{button.innerHTML="<span class='material-icons-round'>content_copy</span>",button.dataset.copied=!1,alert=null}),2e3)})).then((()=>{if("function"==typeof this.callback)return this.callback(newText,el)}))}}async copyToClipboard(text){if(!navigator.clipboard||!navigator.clipboard.writeText)return new Promise(((resolve,reject)=>{const textarea=document.createElement("textarea");textarea.textContent=text,document.body.appendChild(textarea),textarea.select();try{document.execCommand("copy"),resolve()}catch(ex){reject(ex)}finally{document.body.removeChild(textarea)}}));try{await navigator.clipboard.writeText(text)}catch(error){console.error("Copy to Clipboard using navigator.clipboard.writeText() failed:",error)}}}